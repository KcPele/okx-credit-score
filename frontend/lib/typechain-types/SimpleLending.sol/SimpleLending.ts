/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface SimpleLendingInterface extends utils.Interface {
  functions: {
    "ETH_PRICE_IN_USD()": FunctionFragment;
    "LOAN_DURATION()": FunctionFragment;
    "MIN_SCORE()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow()": FunctionFragment;
    "creditScore()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "loans(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "repay()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ETH_PRICE_IN_USD"
      | "LOAN_DURATION"
      | "MIN_SCORE"
      | "balanceOf"
      | "borrow"
      | "creditScore"
      | "decimals"
      | "deposit"
      | "getBalance"
      | "loans"
      | "name"
      | "owner"
      | "repay"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ETH_PRICE_IN_USD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOAN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_SCORE", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "borrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creditScore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "repay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_PRICE_IN_USD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOAN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_SCORE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LoanIssued(address,uint256)": EventFragment;
    "LoanRepaid(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LoanIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanRepaid"): EventFragment;
}

export interface LoanIssuedEventObject {
  borrower: string;
  amount: BigNumber;
}
export type LoanIssuedEvent = TypedEvent<
  [string, BigNumber],
  LoanIssuedEventObject
>;

export type LoanIssuedEventFilter = TypedEventFilter<LoanIssuedEvent>;

export interface LoanRepaidEventObject {
  borrower: string;
  amount: BigNumber;
}
export type LoanRepaidEvent = TypedEvent<
  [string, BigNumber],
  LoanRepaidEventObject
>;

export type LoanRepaidEventFilter = TypedEventFilter<LoanRepaidEvent>;

export interface SimpleLending extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleLendingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETH_PRICE_IN_USD(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creditScore(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        dueDate: BigNumber;
        repaid: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    repay(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  ETH_PRICE_IN_USD(overrides?: CallOverrides): Promise<BigNumber>;

  LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creditScore(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  loans(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      dueDate: BigNumber;
      repaid: boolean;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  repay(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_PRICE_IN_USD(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(overrides?: CallOverrides): Promise<void>;

    creditScore(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        dueDate: BigNumber;
        repaid: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    repay(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LoanIssued(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): LoanIssuedEventFilter;
    LoanIssued(borrower?: string | null, amount?: null): LoanIssuedEventFilter;

    "LoanRepaid(address,uint256)"(
      borrower?: string | null,
      amount?: null
    ): LoanRepaidEventFilter;
    LoanRepaid(borrower?: string | null, amount?: null): LoanRepaidEventFilter;
  };

  estimateGas: {
    ETH_PRICE_IN_USD(overrides?: CallOverrides): Promise<BigNumber>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrow(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    creditScore(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    loans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    repay(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_PRICE_IN_USD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOAN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creditScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
