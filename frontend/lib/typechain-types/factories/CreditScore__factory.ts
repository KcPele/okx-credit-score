/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CreditScore, CreditScoreInterface } from "../CreditScore";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "MAX_SCORE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "calculateScore",
    inputs: [
      {
        name: "_tradingVolume",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_tradeCount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "getScore",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "lastUpdated",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "oracle",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "scores",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tradeCount",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "tradingVolume",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updateUserData",
    inputs: [
      {
        name: "user",
        type: "address",
        internalType: "address",
      },
      {
        name: "_tradingVolume",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_tradeCount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ScoreUpdated",
    inputs: [
      {
        name: "user",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "score",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b503360045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108958061005d5f395ff3fe608060405234801561000f575f80fd5b5060043610610091575f3560e01c806327ff62231161006457806327ff62231461015557806376dd110f146101735780637dc0d1d0146101a3578063d47875d0146101c1578063df90f84b146101f157610091565b80630a6f93e6146100955780631a2640a1146100c55780631b831e7d146100f55780631cb9a02a14610125575b5f80fd5b6100af60048036038101906100aa91906105ad565b61020d565b6040516100bc91906105f0565b60405180910390f35b6100df60048036038101906100da91906105ad565b610222565b6040516100ec91906105f0565b60405180910390f35b61010f600480360381019061010a91906105ad565b610237565b60405161011c91906105f0565b60405180910390f35b61013f600480360381019061013a9190610633565b61024c565b60405161014c91906105f0565b60405180910390f35b61015d6102d4565b60405161016a91906105f0565b60405180910390f35b61018d600480360381019061018891906105ad565b6102da565b60405161019a91906105f0565b60405180910390f35b6101ab6102ee565b6040516101b89190610680565b60405180910390f35b6101db60048036038101906101d691906105ad565b610313565b6040516101e891906105f0565b60405180910390f35b61020b60048036038101906102069190610699565b610358565b005b6001602052805f5260405f205f915090505481565b6002602052805f5260405f205f915090505481565b6003602052805f5260405f205f915090505481565b5f806032633b9aca00856102609190610743565b61026a9190610773565b90506101f481111561027c576101f490505b5f60038461028a9190610773565b905061012c81111561029c5761012c90505b5f8086116102aa575f6102ad565b60c85b60ff1690508183826102bf91906107b4565b6102c991906107b4565b935050505092915050565b6103e881565b5f602052805f5260405f205f915090505481565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103de90610841565b60405180910390fd5b8160025f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508060035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f610476838361024c565b9050805f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055504260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508373ffffffffffffffffffffffffffffffffffffffff167f66ead48cfe0e1d1aa8bad492e906c348dfcfeecbf3b7b2cdf9b1f3cfa42a29458260405161054191906105f0565b60405180910390a250505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61057c82610553565b9050919050565b61058c81610572565b8114610596575f80fd5b50565b5f813590506105a781610583565b92915050565b5f602082840312156105c2576105c161054f565b5b5f6105cf84828501610599565b91505092915050565b5f819050919050565b6105ea816105d8565b82525050565b5f6020820190506106035f8301846105e1565b92915050565b610612816105d8565b811461061c575f80fd5b50565b5f8135905061062d81610609565b92915050565b5f80604083850312156106495761064861054f565b5b5f6106568582860161061f565b92505060206106678582860161061f565b9150509250929050565b61067a81610572565b82525050565b5f6020820190506106935f830184610671565b92915050565b5f805f606084860312156106b0576106af61054f565b5b5f6106bd86828701610599565b93505060206106ce8682870161061f565b92505060406106df8682870161061f565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61074d826105d8565b9150610758836105d8565b925082610768576107676106e9565b5b828204905092915050565b5f61077d826105d8565b9150610788836105d8565b9250828202610796816105d8565b915082820484148315176107ad576107ac610716565b5b5092915050565b5f6107be826105d8565b91506107c9836105d8565b92508282019050808211156107e1576107e0610716565b5b92915050565b5f82825260208201905092915050565b7f4f6e6c79206f7261636c650000000000000000000000000000000000000000005f82015250565b5f61082b600b836107e7565b9150610836826107f7565b602082019050919050565b5f6020820190508181035f8301526108588161081f565b905091905056fea264697066735822122030c02eab9fed06cbb06cf2d094a799689de8b70c01124d370f5d9b70fb25caef64736f6c63430008140033";

type CreditScoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CreditScoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CreditScore__factory extends ContractFactory {
  constructor(...args: CreditScoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<CreditScore> {
    return super.deploy(overrides || {}) as Promise<CreditScore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CreditScore {
    return super.attach(address) as CreditScore;
  }
  override connect(signer: Signer): CreditScore__factory {
    return super.connect(signer) as CreditScore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CreditScoreInterface {
    return new utils.Interface(_abi) as CreditScoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CreditScore {
    return new Contract(address, _abi, signerOrProvider) as CreditScore;
  }
}
