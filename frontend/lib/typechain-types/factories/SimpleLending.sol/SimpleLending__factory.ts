/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimpleLending,
  SimpleLendingInterface,
} from "../../SimpleLending.sol/SimpleLending";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_creditScore",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "ETH_PRICE_IN_USD",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "LOAN_DURATION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "MIN_SCORE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "borrow",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "creditScore",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ICreditScore",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "loans",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "dueDate",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "repaid",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "repay",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "LoanIssued",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LoanRepaid",
    inputs: [
      {
        name: "borrower",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b506040516200147438038062001474833981810160405281019062000036919062000121565b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620000eb82620000c0565b9050919050565b620000fd81620000df565b811462000108575f80fd5b50565b5f815190506200011b81620000f2565b92915050565b5f60208284031215620001395762000138620000bc565b5b5f62000148848285016200010b565b91505092915050565b611315806200015f5f395ff3fe608060405260043610610101575f3560e01c806340b892701161009457806395d89b411161006357806395d89b411461031a578063d0e30db014610344578063d591cd961461034e578063e02a4dfd14610378578063e68d3569146103a257610108565b806340b892701461024c57806370a082311461027657806373b4086b146102b25780638da5cb5b146102f057610108565b80632e1a7d4d116100d05780632e1a7d4d146101c6578063313ce567146101ee57806339da315214610218578063402d88831461024257610108565b806301ffc9a71461010c57806306fdde031461014857806312065fe01461017257806318160ddd1461019c57610108565b3661010857005b5f80fd5b348015610117575f80fd5b50610132600480360381019061012d9190610b4a565b6103b8565b60405161013f9190610b8f565b60405180910390f35b348015610153575f80fd5b5061015c6103be565b6040516101699190610c32565b60405180910390f35b34801561017d575f80fd5b506101866103d4565b6040516101939190610c6a565b60405180910390f35b3480156101a7575f80fd5b506101b06103db565b6040516101bd9190610c6a565b60405180910390f35b3480156101d1575f80fd5b506101ec60048036038101906101e79190610cad565b6103df565b005b3480156101f9575f80fd5b50610202610519565b60405161020f9190610cf3565b60405180910390f35b348015610223575f80fd5b5061022c61051d565b6040516102399190610d86565b60405180910390f35b61024a610540565b005b348015610257575f80fd5b506102606106ee565b60405161026d9190610c6a565b60405180910390f35b348015610281575f80fd5b5061029c60048036038101906102979190610dda565b6106f4565b6040516102a99190610c6a565b60405180910390f35b3480156102bd575f80fd5b506102d860048036038101906102d39190610dda565b6106fa565b6040516102e793929190610e05565b60405180910390f35b3480156102fb575f80fd5b5061030461072c565b6040516103119190610e49565b60405180910390f35b348015610325575f80fd5b5061032e610751565b60405161033b9190610c32565b60405180910390f35b61034c610767565b005b348015610359575f80fd5b50610362610769565b60405161036f9190610c6a565b60405180910390f35b348015610383575f80fd5b5061038c61076f565b6040516103999190610c6a565b60405180910390f35b3480156103ad575f80fd5b506103b6610776565b005b5f919050565b606060405180602001604052805f815250905090565b5f47905090565b5f90565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461046e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046590610eac565b60405180910390fd5b804710156104b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a890610f14565b60405180910390fd5b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610515573d5f803e3d5ffd5b5050565b5f90565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2090505f815f0154116105c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bc90610f7c565b60405180910390fd5b806002015f9054906101000a900460ff1615610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610fe4565b60405180910390fd5b5f610bb864e8d4a51000835f015461062e919061102f565b610638919061109d565b90508034101561067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067490611117565b60405180910390fd5b6001826002015f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fc200a1f31dd659e356e0f112c82558e25f49f7b0f84438691cd96f5cb3558823835f01546040516106e29190610c6a565b60405180910390a25050565b61012c81565b5f919050565b6002602052805f5260405f205f91509050805f015490806001015490806002015f9054906101000a900460ff16905083565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060405180602001604052805f815250905090565b565b610bb881565b62278d0081565b5f60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f0154148061080c575060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f9054906101000a900460ff165b61084b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108429061117f565b60405180910390fd5b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d47875d0336040518263ffffffff1660e01b81526004016108a59190610e49565b602060405180830381865afa1580156108c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e491906111b1565b905061012c81101561092b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092290611226565b60405180910390fd5b5f620f4240600a8361093d919061102f565b610947919061102f565b90505f600282610957919061109d565b90505f610bb864e8d4a510008361096e919061102f565b610978919061109d565b9050804710156109bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b49061128e565b60405180910390fd5b604051806060016040528083815260200162278d00426109dd91906112ac565b81526020015f151581525060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f0155602082015181600101556040820151816002015f6101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015610a9c573d5f803e3d5ffd5b503373ffffffffffffffffffffffffffffffffffffffff167f7a954f5289898ac88c79469be62462b769f41c4f171a4f4591ef5a62b6fbf74f83604051610ae39190610c6a565b60405180910390a250505050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b2981610af5565b8114610b33575f80fd5b50565b5f81359050610b4481610b20565b92915050565b5f60208284031215610b5f57610b5e610af1565b5b5f610b6c84828501610b36565b91505092915050565b5f8115159050919050565b610b8981610b75565b82525050565b5f602082019050610ba25f830184610b80565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610bdf578082015181840152602081019050610bc4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610c0482610ba8565b610c0e8185610bb2565b9350610c1e818560208601610bc2565b610c2781610bea565b840191505092915050565b5f6020820190508181035f830152610c4a8184610bfa565b905092915050565b5f819050919050565b610c6481610c52565b82525050565b5f602082019050610c7d5f830184610c5b565b92915050565b610c8c81610c52565b8114610c96575f80fd5b50565b5f81359050610ca781610c83565b92915050565b5f60208284031215610cc257610cc1610af1565b5b5f610ccf84828501610c99565b91505092915050565b5f60ff82169050919050565b610ced81610cd8565b82525050565b5f602082019050610d065f830184610ce4565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f819050919050565b5f610d4e610d49610d4484610d0c565b610d2b565b610d0c565b9050919050565b5f610d5f82610d34565b9050919050565b5f610d7082610d55565b9050919050565b610d8081610d66565b82525050565b5f602082019050610d995f830184610d77565b92915050565b5f610da982610d0c565b9050919050565b610db981610d9f565b8114610dc3575f80fd5b50565b5f81359050610dd481610db0565b92915050565b5f60208284031215610def57610dee610af1565b5b5f610dfc84828501610dc6565b91505092915050565b5f606082019050610e185f830186610c5b565b610e256020830185610c5b565b610e326040830184610b80565b949350505050565b610e4381610d9f565b82525050565b5f602082019050610e5c5f830184610e3a565b92915050565b7f4e6f7420746865206f776e6572000000000000000000000000000000000000005f82015250565b5f610e96600d83610bb2565b9150610ea182610e62565b602082019050919050565b5f6020820190508181035f830152610ec381610e8a565b9050919050565b7f496e73756666696369656e742062616c616e63650000000000000000000000005f82015250565b5f610efe601483610bb2565b9150610f0982610eca565b602082019050919050565b5f6020820190508181035f830152610f2b81610ef2565b9050919050565b7f4e6f206c6f616e000000000000000000000000000000000000000000000000005f82015250565b5f610f66600783610bb2565b9150610f7182610f32565b602082019050919050565b5f6020820190508181035f830152610f9381610f5a565b9050919050565b7f416c7265616479207265706169640000000000000000000000000000000000005f82015250565b5f610fce600e83610bb2565b9150610fd982610f9a565b602082019050919050565b5f6020820190508181035f830152610ffb81610fc2565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61103982610c52565b915061104483610c52565b925082820261105281610c52565b9150828204841483151761106957611068611002565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6110a782610c52565b91506110b283610c52565b9250826110c2576110c1611070565b5b828204905092915050565b7f496e73756666696369656e74207061796d656e740000000000000000000000005f82015250565b5f611101601483610bb2565b915061110c826110cd565b602082019050919050565b5f6020820190508181035f83015261112e816110f5565b9050919050565b7f4578697374696e67206c6f616e000000000000000000000000000000000000005f82015250565b5f611169600d83610bb2565b915061117482611135565b602082019050919050565b5f6020820190508181035f8301526111968161115d565b9050919050565b5f815190506111ab81610c83565b92915050565b5f602082840312156111c6576111c5610af1565b5b5f6111d38482850161119d565b91505092915050565b7f53636f726520746f6f206c6f77000000000000000000000000000000000000005f82015250565b5f611210600d83610bb2565b915061121b826111dc565b602082019050919050565b5f6020820190508181035f83015261123d81611204565b9050919050565b7f496e73756666696369656e742066756e647320696e20636f6e747261637400005f82015250565b5f611278601e83610bb2565b915061128382611244565b602082019050919050565b5f6020820190508181035f8301526112a58161126c565b9050919050565b5f6112b682610c52565b91506112c183610c52565b92508282019050808211156112d9576112d8611002565b5b9291505056fea2646970667358221220384f23d56c9990b1c191fabdfbe12edea4ebca2df2da39ce470b953d09e4df5564736f6c63430008140033";

type SimpleLendingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleLendingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleLending__factory extends ContractFactory {
  constructor(...args: SimpleLendingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _creditScore: string,
    overrides?: Overrides & { from?: string }
  ): Promise<SimpleLending> {
    return super.deploy(
      _creditScore,
      overrides || {}
    ) as Promise<SimpleLending>;
  }
  override getDeployTransaction(
    _creditScore: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_creditScore, overrides || {});
  }
  override attach(address: string): SimpleLending {
    return super.attach(address) as SimpleLending;
  }
  override connect(signer: Signer): SimpleLending__factory {
    return super.connect(signer) as SimpleLending__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleLendingInterface {
    return new utils.Interface(_abi) as SimpleLendingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleLending {
    return new Contract(address, _abi, signerOrProvider) as SimpleLending;
  }
}
