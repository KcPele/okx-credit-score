/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CreditScoreInterface extends utils.Interface {
  functions: {
    "MAX_SCORE()": FunctionFragment;
    "calculateScore(uint256,uint256)": FunctionFragment;
    "getScore(address)": FunctionFragment;
    "lastUpdated(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "scores(address)": FunctionFragment;
    "tradeCount(address)": FunctionFragment;
    "tradingVolume(address)": FunctionFragment;
    "updateUserData(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SCORE"
      | "calculateScore"
      | "getScore"
      | "lastUpdated"
      | "oracle"
      | "scores"
      | "tradeCount"
      | "tradingVolume"
      | "updateUserData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_SCORE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateScore",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getScore", values: [string]): string;
  encodeFunctionData(functionFragment: "lastUpdated", values: [string]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "scores", values: [string]): string;
  encodeFunctionData(functionFragment: "tradeCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tradingVolume",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserData",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SCORE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tradeCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradingVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserData",
    data: BytesLike
  ): Result;

  events: {
    "ScoreUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScoreUpdated"): EventFragment;
}

export interface ScoreUpdatedEventObject {
  user: string;
  score: BigNumber;
}
export type ScoreUpdatedEvent = TypedEvent<
  [string, BigNumber],
  ScoreUpdatedEventObject
>;

export type ScoreUpdatedEventFilter = TypedEventFilter<ScoreUpdatedEvent>;

export interface CreditScore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditScoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateScore(
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getScore(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdated(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    scores(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tradeCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingVolume(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateUserData(
      user: string,
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

  calculateScore(
    _tradingVolume: BigNumberish,
    _tradeCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getScore(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  scores(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tradeCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  tradingVolume(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  updateUserData(
    user: string,
    _tradingVolume: BigNumberish,
    _tradeCount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    calculateScore(
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScore(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    scores(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tradeCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tradingVolume(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateUserData(
      user: string,
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ScoreUpdated(address,uint256)"(
      user?: string | null,
      score?: null
    ): ScoreUpdatedEventFilter;
    ScoreUpdated(user?: string | null, score?: null): ScoreUpdatedEventFilter;
  };

  estimateGas: {
    MAX_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    calculateScore(
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScore(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    scores(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tradeCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    tradingVolume(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    updateUserData(
      user: string,
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateScore(
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScore(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scores(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradingVolume(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateUserData(
      user: string,
      _tradingVolume: BigNumberish,
      _tradeCount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
